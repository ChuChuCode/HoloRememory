//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cb49e831-2293-41b1-9802-72e29edcf6f3"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""78507cad-4a0a-4553-b83e-ffa9affe5680"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""3e5e6522-bf26-47f5-a137-ffe3a5b7daf9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""ce8fdabe-e550-41cb-ab5d-35981135f1a4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""08b16753-869e-46e6-a746-a5fd9749d78a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""ae100d31-2669-47c1-a1c1-9170562d5195"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""16b4b54b-ef35-4997-9e80-864564744578"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""d810027d-2329-41cf-a137-36a32af77783"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera_Change"",
                    ""type"": ""Button"",
                    ""id"": ""6c30fe70-1bc9-4425-8bf8-44cd73b07b97"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera_Reset"",
                    ""type"": ""Button"",
                    ""id"": ""bbd5cef7-d505-46d8-b7e6-e016f7841eea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Option"",
                    ""type"": ""Button"",
                    ""id"": ""bc1ea15e-fab8-4c27-9abe-21fb5802feb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StoreKey"",
                    ""type"": ""Button"",
                    ""id"": ""2f1f9f36-298c-416f-ae83-c68602abfb24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f50c553-58d7-4486-af24-f4bd20bc69cf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70390658-fa4c-4d3a-89fc-f2f161e70fe9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0a4c821-f51e-47f9-94fc-1271be3848af"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ead8712c-c445-4b4d-8768-77637d0aed3f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""262e4b78-2046-414a-b73a-8e25a3ad0a8d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8598a89-ebbe-4ef9-988c-8e5f59b4be7e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Right_Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b6b3859-1a1a-4ade-be56-5bcdc5d624d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Left_Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6759e65a-6dc8-49a9-ba24-3f3011030ae5"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Camera_Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7dc91d0-6d8b-4661-8a2f-0b9e90a39c37"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Camera_Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4728e900-d45a-4a5e-9f56-b95d74a8be5a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KeyBoard and Mouse"",
                    ""action"": ""Option"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242d1db6-3858-459e-b2f4-3664271f05ab"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StoreKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_old"",
            ""id"": ""3406a063-99c8-4e0a-9e73-a1f7d577898e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8eefb6cb-2f3f-4700-939c-f9239288abd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""dc21d329-3da1-4d1e-8b36-108a78d484bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""bf48b7bd-ff64-428a-8458-6f41cc766b66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""ddfd338c-aae9-4276-8e48-226e561df1c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ult"",
                    ""type"": ""Button"",
                    ""id"": ""99fb8271-c815-430b-8ba9-ce33475e3439"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4fe94138-4d8e-4aae-ad93-7e44104de175"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75d420c3-da40-47c0-8a05-c2c57ad506c5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""23923fb4-233b-4104-abd0-d3dfb87f1082"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2cdae94-9d6e-4e85-88f8-b032ddc1c63a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""473d156f-4e5b-4b7f-9ce7-31874fea78c7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c15c9419-ac93-4293-a544-4ec891bc339f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84f1e98-dc93-4ade-a116-3c6583594373"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""520c0fe7-b891-4a47-8355-8e1a2f1da319"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8a8a781-a3c0-4184-b236-76d819d3c190"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a78783-63e1-47e1-9a9a-4698a489f216"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ult"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard and Mouse"",
            ""bindingGroup"": ""KeyBoard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MousePosition = m_Player.FindAction("MousePosition", throwIfNotFound: true);
        m_Player_Q = m_Player.FindAction("Q", throwIfNotFound: true);
        m_Player_W = m_Player.FindAction("W", throwIfNotFound: true);
        m_Player_E = m_Player.FindAction("E", throwIfNotFound: true);
        m_Player_R = m_Player.FindAction("R", throwIfNotFound: true);
        m_Player_Right_Mouse = m_Player.FindAction("Right_Mouse", throwIfNotFound: true);
        m_Player_Left_Mouse = m_Player.FindAction("Left_Mouse", throwIfNotFound: true);
        m_Player_Camera_Change = m_Player.FindAction("Camera_Change", throwIfNotFound: true);
        m_Player_Camera_Reset = m_Player.FindAction("Camera_Reset", throwIfNotFound: true);
        m_Player_Option = m_Player.FindAction("Option", throwIfNotFound: true);
        m_Player_StoreKey = m_Player.FindAction("StoreKey", throwIfNotFound: true);
        // Player_old
        m_Player_old = asset.FindActionMap("Player_old", throwIfNotFound: true);
        m_Player_old_Move = m_Player_old.FindAction("Move", throwIfNotFound: true);
        m_Player_old_Attack = m_Player_old.FindAction("Attack", throwIfNotFound: true);
        m_Player_old_MousePosition = m_Player_old.FindAction("MousePosition", throwIfNotFound: true);
        m_Player_old_Special = m_Player_old.FindAction("Special", throwIfNotFound: true);
        m_Player_old_Ult = m_Player_old.FindAction("Ult", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player_old.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player_old.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MousePosition;
    private readonly InputAction m_Player_Q;
    private readonly InputAction m_Player_W;
    private readonly InputAction m_Player_E;
    private readonly InputAction m_Player_R;
    private readonly InputAction m_Player_Right_Mouse;
    private readonly InputAction m_Player_Left_Mouse;
    private readonly InputAction m_Player_Camera_Change;
    private readonly InputAction m_Player_Camera_Reset;
    private readonly InputAction m_Player_Option;
    private readonly InputAction m_Player_StoreKey;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Player_MousePosition;
        public InputAction @Q => m_Wrapper.m_Player_Q;
        public InputAction @W => m_Wrapper.m_Player_W;
        public InputAction @E => m_Wrapper.m_Player_E;
        public InputAction @R => m_Wrapper.m_Player_R;
        public InputAction @Right_Mouse => m_Wrapper.m_Player_Right_Mouse;
        public InputAction @Left_Mouse => m_Wrapper.m_Player_Left_Mouse;
        public InputAction @Camera_Change => m_Wrapper.m_Player_Camera_Change;
        public InputAction @Camera_Reset => m_Wrapper.m_Player_Camera_Reset;
        public InputAction @Option => m_Wrapper.m_Player_Option;
        public InputAction @StoreKey => m_Wrapper.m_Player_StoreKey;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Q.started += instance.OnQ;
            @Q.performed += instance.OnQ;
            @Q.canceled += instance.OnQ;
            @W.started += instance.OnW;
            @W.performed += instance.OnW;
            @W.canceled += instance.OnW;
            @E.started += instance.OnE;
            @E.performed += instance.OnE;
            @E.canceled += instance.OnE;
            @R.started += instance.OnR;
            @R.performed += instance.OnR;
            @R.canceled += instance.OnR;
            @Right_Mouse.started += instance.OnRight_Mouse;
            @Right_Mouse.performed += instance.OnRight_Mouse;
            @Right_Mouse.canceled += instance.OnRight_Mouse;
            @Left_Mouse.started += instance.OnLeft_Mouse;
            @Left_Mouse.performed += instance.OnLeft_Mouse;
            @Left_Mouse.canceled += instance.OnLeft_Mouse;
            @Camera_Change.started += instance.OnCamera_Change;
            @Camera_Change.performed += instance.OnCamera_Change;
            @Camera_Change.canceled += instance.OnCamera_Change;
            @Camera_Reset.started += instance.OnCamera_Reset;
            @Camera_Reset.performed += instance.OnCamera_Reset;
            @Camera_Reset.canceled += instance.OnCamera_Reset;
            @Option.started += instance.OnOption;
            @Option.performed += instance.OnOption;
            @Option.canceled += instance.OnOption;
            @StoreKey.started += instance.OnStoreKey;
            @StoreKey.performed += instance.OnStoreKey;
            @StoreKey.canceled += instance.OnStoreKey;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Q.started -= instance.OnQ;
            @Q.performed -= instance.OnQ;
            @Q.canceled -= instance.OnQ;
            @W.started -= instance.OnW;
            @W.performed -= instance.OnW;
            @W.canceled -= instance.OnW;
            @E.started -= instance.OnE;
            @E.performed -= instance.OnE;
            @E.canceled -= instance.OnE;
            @R.started -= instance.OnR;
            @R.performed -= instance.OnR;
            @R.canceled -= instance.OnR;
            @Right_Mouse.started -= instance.OnRight_Mouse;
            @Right_Mouse.performed -= instance.OnRight_Mouse;
            @Right_Mouse.canceled -= instance.OnRight_Mouse;
            @Left_Mouse.started -= instance.OnLeft_Mouse;
            @Left_Mouse.performed -= instance.OnLeft_Mouse;
            @Left_Mouse.canceled -= instance.OnLeft_Mouse;
            @Camera_Change.started -= instance.OnCamera_Change;
            @Camera_Change.performed -= instance.OnCamera_Change;
            @Camera_Change.canceled -= instance.OnCamera_Change;
            @Camera_Reset.started -= instance.OnCamera_Reset;
            @Camera_Reset.performed -= instance.OnCamera_Reset;
            @Camera_Reset.canceled -= instance.OnCamera_Reset;
            @Option.started -= instance.OnOption;
            @Option.performed -= instance.OnOption;
            @Option.canceled -= instance.OnOption;
            @StoreKey.started -= instance.OnStoreKey;
            @StoreKey.performed -= instance.OnStoreKey;
            @StoreKey.canceled -= instance.OnStoreKey;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player_old
    private readonly InputActionMap m_Player_old;
    private List<IPlayer_oldActions> m_Player_oldActionsCallbackInterfaces = new List<IPlayer_oldActions>();
    private readonly InputAction m_Player_old_Move;
    private readonly InputAction m_Player_old_Attack;
    private readonly InputAction m_Player_old_MousePosition;
    private readonly InputAction m_Player_old_Special;
    private readonly InputAction m_Player_old_Ult;
    public struct Player_oldActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player_oldActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_old_Move;
        public InputAction @Attack => m_Wrapper.m_Player_old_Attack;
        public InputAction @MousePosition => m_Wrapper.m_Player_old_MousePosition;
        public InputAction @Special => m_Wrapper.m_Player_old_Special;
        public InputAction @Ult => m_Wrapper.m_Player_old_Ult;
        public InputActionMap Get() { return m_Wrapper.m_Player_old; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_oldActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_oldActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_oldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_oldActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
            @Ult.started += instance.OnUlt;
            @Ult.performed += instance.OnUlt;
            @Ult.canceled += instance.OnUlt;
        }

        private void UnregisterCallbacks(IPlayer_oldActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
            @Ult.started -= instance.OnUlt;
            @Ult.performed -= instance.OnUlt;
            @Ult.canceled -= instance.OnUlt;
        }

        public void RemoveCallbacks(IPlayer_oldActions instance)
        {
            if (m_Wrapper.m_Player_oldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_oldActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_oldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_oldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_oldActions @Player_old => new Player_oldActions(this);
    private int m_KeyBoardandMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardandMouseScheme
    {
        get
        {
            if (m_KeyBoardandMouseSchemeIndex == -1) m_KeyBoardandMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoard and Mouse");
            return asset.controlSchemes[m_KeyBoardandMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnQ(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnRight_Mouse(InputAction.CallbackContext context);
        void OnLeft_Mouse(InputAction.CallbackContext context);
        void OnCamera_Change(InputAction.CallbackContext context);
        void OnCamera_Reset(InputAction.CallbackContext context);
        void OnOption(InputAction.CallbackContext context);
        void OnStoreKey(InputAction.CallbackContext context);
    }
    public interface IPlayer_oldActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnUlt(InputAction.CallbackContext context);
    }
}
